#inspired by Kief’s arrays


script, initArray, parent, length=0, begin
	variable(sli, i)
	sli := createContainer
	if (length>0) then (
		for (i, 1, length) do (setParent(createContainer, sli))
	)
end


script, resizeArray, parent, length, begin
	variable(i)
	for (i, child count(parent), length) do (
		setParent(createContainer, parent)
	)
end


script, writeArray, parent, index, value, begin
	variable(sli)
	if (sliceIsValid(sliceChild (parent, index))) then (
		sli := sliceChild (parent, index)
		setSliceX (sli, value)
		return (sli)
	) else (
		$99="Passed Index exceeds array length"
		script error(99)
	)
end


script, appendArray, parent, value=0, begin
	variable(sli)
	sli := createContainer
	setSliceX (sli, value)
	setParent(sli, parent)
	return (sli)
end


script, popArray, parent, index, begin
	variable(sli)
	if (sliceIsValid(sliceChild (parent, index))) then (
		sli := sliceChild (parent, index)
		freeSlice (sli)
	) else (
		$99="Passed Index exceeds array length"
		script error(99)
	)
end


#2d arrays
script, init2dArray, lookup, x=1, y=0, begin
	variable(sli, sli2, i, j)
	sli := createContainer
	if (y>0) then (
		for (i, 1, y) do (
			set parent (createContainer, sli)
			if (x>0) then (
				for (j, 1, x) do (
					sli2 := createContainer
					set parent (sli2, sli)
				)
			)
		)
	)
	setSliceLookup (sli, lookup)
end

script, write2dArray, parent, x, y, begin

end

script, append2dArray, parent, x, y, begin

end

#todo: scripts that resize both x and y of array, and
#add and remove/pop rows/columns?

#creates a static 3d array and returns the parent slice.
#it’s fairly readable via slice tree
script, init3darray, lookup, y=1, x=1, z=0, begin
	variable (sli, sli2, i, j)
	#create slice that holds all  the other slices
	sli := createContainer
	setSliceLookup(sli, lookup)
	return (sli)

	#loop through slices and create all the slices for y position
	#and x position and sets z (depth)
	for (i, 1, y) do (
		set parent (createContainer, sli)
		for (j, 1, x) do (
			sli2 := createContainer
			set parent (sli2, sli) 
			resizeExtra(sli2, z)
		)
	)
end

script, setZ3dArray, parent, x, y, z, begin
	variable (sli)
	sli := sliceChild(sliceChild (parent, y), x)
	resizeExtra(sli, z)
end


#sets and also returns value of 3d array in position x/y
script, write3dArray, parent, x, y, z, value, begin
	variable (sli)
	sli := sliceChild(sliceChild (parent, y), x)
	return (setExtra(sli, z, value))

	#this will write stuff to g_debug.txt
	#comment out if not debugging to slightly improve performance
	dump slice tree (sli)
end


#appends and also returns value of 3d array in position x/y
script, append3dArray, parent, x, y, value, begin
	variable (sli)
	sli := sliceChild(sliceChild (parent, y), x)
	return (appendExtra(sli, value))

	#this will write stuff to g_debug.txt
	#comment out if not debugging to slightly improve performance
	dump slice tree (sli)
end


#gets value of 3d array in position x/y
script, read3dArray, parent, x, y, z, begin
	variable (sli)
	sli := sliceChild(sliceChild (parent, y), x)
	return(getExtra(sli, z))
end